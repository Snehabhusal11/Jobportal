<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin Users | Elevate Workforce Solutions</title>
  <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background: #f0f4f8;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      color: #333;
    }

    header {
      background: #e0e7ff;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      border-radius: 0 0 20px 20px;
    }

    header h1 {
      margin: 0;
      font-family: 'Comic Neue', cursive;
      margin-left: 100px;
      font-size: 28px;
    }

    .logout-btn {
      background: #ff4d4d;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }

    .logout-btn:hover {
      background: #ff1a1a;
    }

    #content {
      flex-grow: 1;
      padding: 40px;
    }

    h2 {
      text-align: center;
      margin-bottom: 30px;
    }

    .add-admin {
      display: block;
      margin: 0 auto 30px;
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      font-weight: bold;
      cursor: pointer;
    }

    .add-admin:hover {
      background-color: #45a049;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    th, td {
      padding: 12px 15px;
      border: 1px solid #ddd;
      text-align: left;
    }

    th {
      background-color: #578FCA;
      color: white;
    }

    .action-buttons button {
      padding: 5px 10px;
      border: none;
      border-radius: 5px;
      margin-right: 5px;
      cursor: pointer;
    }

    .edit {
      background-color: orange;
      color: white;
    }

    .edit:hover {
      background-color: darkorange;
    }

    .delete {
      background-color: red;
      color: white;
    }

    .delete:hover {
      background-color: darkred;
    }

    footer {
      background: #e0e7ff;
      padding: 20px 0;
      display: flex;
      justify-content: center;
      gap: 40px;
      box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
      border-radius: 20px 20px 0 0;
    }

    footer a {
      text-decoration: none;
      font-family: 'Comic Neue', cursive;
      color: #333;
      font-weight: bold;
    }

    footer a:hover {
      color: #007bff;
    }

    @media (max-width: 768px) {
      header h1 {
        font-size: 20px;
        margin-left: 20px;
      }

      .logout-btn {
        padding: 8px 12px;
      }

      #content {
        padding: 20px;
      }

      table {
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>Elevate Workforce Solutions</h1>
    <button class="logout-btn" onclick="logout()">Logout</button>
  </header>
<br> </br>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Full Name</th>
          <th>Email</th>
          <th>Phone</th>
          <th>Address</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="adminUsersList"></tbody>
    </table>
  </div>

  <footer>
    <a href="/admindashbord">Admin Users</a>
    <a href="/admincompany">Companies</a>
    <a href="/adminContact">Contacts</a>
  </footer>

  <script>
    async function logout() {
      try {
        const res = await fetch('/api/user/logout', {
          method: 'POST',
          credentials: 'include'
        });
        if (res.ok) window.location.href = '/login';
      } catch (err) {
        console.error('Logout failed:', err);
      }
    }

    async function fetchAdminUsers() {
      try {
        const response = await fetch('/api/user/getusers');
        if (!response.ok) throw new Error('Failed to fetch admin users');
        const admins = await response.json();
        displayAdminUsers(admins);
      } catch (error) {
        console.error('Error fetching admin users:', error);
      }
    }

    function displayAdminUsers(admins) {
      const adminUsersList = document.getElementById('adminUsersList');
      adminUsersList.innerHTML = '';
      admins.forEach(admin => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${admin.id}</td>
          <td>${admin.fullName}</td>
          <td>${admin.email}</td>
          <td>${admin.phone || 'N/A'}</td>
          <td>${admin.address || 'N/A'}</td>
          <td class="action-buttons">
            <button class="edit" onclick="editAdmin(${admin.id})">Edit</button>
            <button class="delete" onclick="deleteAdmin(${admin.id})">Delete</button>
          </td>
        `;
        adminUsersList.appendChild(row);
      });
    }

    function showAddAdminForm() {
      document.getElementById('addAdminForm').style.display = 'block';
    }

    function hideAddAdminForm() {
      document.getElementById('addAdminForm').style.display = 'none';
    }

    function editAdmin(adminId) {
      const fullName = prompt("Enter new full name:");
      const email = prompt("Enter new email:");
      const password = prompt("Enter new password (leave blank to keep existing):");
      const phone = prompt("Enter new phone:");
      const address = prompt("Enter new address:");

      if (!fullName || !email) {
        alert("Full name and email are required!");
        return;
      }

      const updatedData = { fullName, email, phone, address };
      if (password && password.trim() !== "") {
        updatedData.password = password;
      }

      fetch(`/api/user/updateUser?id=${adminId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData),
      })
      .then(response => {
        if (!response.ok) throw new Error('Failed to update admin');
        return response.json();
      })
      .then(() => {
        alert("Admin updated successfully!");
        fetchAdminUsers();
      })
      .catch(error => {
        console.error('Error updating admin:', error);
        alert("Error updating admin. Please try again.");
      });
    }

    function deleteAdmin(adminId) {
      fetch(`/api/user/deletebyid?id=${adminId}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) throw new Error('Failed to delete admin');
        fetchAdminUsers();
      })
      .catch(error => {
        console.error('Error deleting admin:', error);
      });
    }

    window.onload = fetchAdminUsers;
  </script>
</body>
</html>
